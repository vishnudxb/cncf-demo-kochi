---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gdpr-api-configmap
  namespace: default
data:
  gdpr-api.py: |
    from flask import Flask, jsonify, request
    import sqlite3

    app = Flask(__name__)

    # Initialize SQLite database (for demo purposes)
    DATABASE = '/db/data.db'

    def get_db_connection():
        conn = sqlite3.connect(DATABASE)
        conn.row_factory = sqlite3.Row
        return conn

    # Initialize database and populate data (this runs when the app starts)
    def init_db():
        conn = get_db_connection()
        conn.execute('CREATE TABLE IF NOT EXISTS data (id INTEGER PRIMARY KEY, type TEXT, content TEXT)')
        conn.execute('INSERT INTO data (type, content) VALUES ("nonpii", "This is non-PII data from Cluster 2")')
        conn.execute('INSERT INTO data (type, content) VALUES ("pii", "Sanitized PII Data: SSN: ***-**-6789")')
        conn.commit()
        conn.close()

    # Endpoint for non-PII data
    @app.route('/nonpiidata', methods=['GET'])
    def non_pii_data():
        conn = get_db_connection()
        data = conn.execute('SELECT content FROM data WHERE type = "nonpii"').fetchone()
        conn.close()
        return jsonify({"data": data["content"]})

    # Endpoint for PII data
    @app.route('/piidata', methods=['GET'])
    def pii_data():
        conn = get_db_connection()
        data = conn.execute('SELECT content FROM data WHERE type = "pii"').fetchone()
        conn.close()
        return jsonify({"data": data["content"]})

    if __name__ == '__main__':
        init_db()
        app.run(host='0.0.0.0', port=9000)
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: gdpr-api-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"  # Adjust this path as needed

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gdpr-api-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gdpr-api
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: gdpr-api
  template:
    metadata:
      labels:
        app: gdpr-api
    spec:
      containers:
      - name: gdpr-api
        image: python:3.9-slim
        command:
          - sh
          - -c
          - |
            pip install flask && python /app/gdpr-api.py
        ports:
        - containerPort: 9000
        volumeMounts:
        - name: app-code
          mountPath: /app
        - name: db-storage
          mountPath: /db          
      volumes:
      - name: app-code
        configMap:
          name: gdpr-api-configmap
      - name: db-storage
        persistentVolumeClaim:
          claimName: gdpr-api-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: gdpr-api
  namespace: default
spec:
  selector:
    app: gdpr-api
  ports:
  - protocol: TCP
    port: 9000
    targetPort: 9000
